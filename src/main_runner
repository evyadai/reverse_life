import pandas as pd
import numpy as np
import time
import json

import architecture.LifeBoard


def read_data():
    input_directory = "F:\\data\\conways-reverse-game-of-life-2020\\"
    train_file = input_directory + "train.csv"
    test_file = input_directory + "test.csv"
    # sample_submission_file  = f'{input_directory}\\sample_submission.csv'
    # submission_file         = f'{output_directory}/submission.csv'
    # timeout_file            = f'{output_directory}/timeouts.csv'
    # image_segmentation_file = f'{root_directory}/output/image_segmentation_solutions.csv'

    train_df = pd.read_csv(train_file, index_col='id').astype(np.int)
    test_df = pd.read_csv(test_file, index_col='id').astype(np.int)
    # submission_df         = pd.read_csv(submission_file,  index_col='id').astype(np.int)
    # sample_submission_df  = pd.read_csv(sample_submission_file,  index_col='id').astype(np.int)
    # timeout_df            = pd.read_csv(timeout_file,  index_col='id') if os.path.exists(timeout_file) else pd.DataFrame(columns=['id','timeout'])
    # image_segmentation_df = pd.read_csv(image_segmentation_file,  index_col='id').astype(np.int)
    return train_df, test_df


def preprocess_tilings(size):
    init_board = architecture.LifeBoard.LifeBoard(width=size, height=size)
    envelope = [(i, size - 1) for i in range(size)]
    envelope.extend([(size - 1, i) for i in range(size)])
    dict_paddings = {"corner": [(0, 1), (0, 1)]
        , "edge": [(1, 1), (0, 1)]
        , "middle": [(1, 1), (1, 1)]}
    for name, padding in dict_paddings.items():
        dict_cast = init_board.cast(padding=padding)
        json.dump(dict_cast, open("..\\preprocess\\{}_{}_{}.json".format(name, size, size), "w"))

    print(len(dict_cast))


def main():
    # train_df,test_df = read_data()
    # preprocess(train_df)
    #preprocess_tilings(3)
    board = np.zeros((6,6))
    board[1,:3] = 1
    life_board = architecture.LifeBoard(board=board)
    life_board.reverse()
    # take from train example with delta1 - only 6*6 bottom
    # solve the 6*6 board
    print("end")


if __name__ == "__main__":
    tic = time.time()
    main()
    print("time elpassed: {}".format(time.time() - tic))
